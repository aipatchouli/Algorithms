#include<bits/stdc++.h>
using namespace std;

//对于一个字符串, 从前开始读和从后开始读是一样的, 我们就称这个字符串是回文串。例如"ABCBA","AA", "A" 是回文串, 而"ABCD", "AAB"不是回文串。牛牛特别喜欢回文串, 他手中有一个字符串s, 牛牛在思考能否从字 符串中移除部分(0个或多个)字符使其变为回文串，并且牛牛认为空串不是回文串。牛牛发现移除的方案可能有 很多种, 希望你来帮他计算一下一共有多少种移除方案可以使s变为回文串。对于两种移除方案, 如果移除的字符位置不一样就是不同的方案。

int main() {
    string s;
    cin>>s;
    int n=s.size();
    
    vector<vector<int>> dp(n, vector<int>(n, 0)); //dp[i][j] 表示以i开头以j结尾的范围上的方案
    dp[0][0] = 1;
    
    for(int j=1; j<n; j++){
        dp[j][j] = 1;
        dp[j-1][j] = s[j-1]==s[j] ? 3 : 2;
        for(int i=j-2; i>=0; i--) {
            if(s[i] != s[j]) {
                dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1])%998244353; //去重
            } else {
                dp[i][j] = (dp[i+1][j] + dp[i][j-1] + 1)%998244353;
            }
            while(dp[i][j]<0) dp[i][j] += 998244353; //因为取模导致有的数取模了有的数没取模进行加减，不能反映原本的大小关系，需要及时加模值补偿
        }
    }
     
    cout<<dp[0][n-1]%998244353<<endl;
    return 0;
}